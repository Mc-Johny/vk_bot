import os
import random
import sqlite3
import t_w
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
import time
from datetime import datetime as dt
import requests
from PIL import Image, ImageDraw, ImageFont
import threading
import json

token = ''
vk_session = vk_api.VkApi(token=token)

vk = vk_session.get_api()
longpool = VkBotLongPoll(vk_session, id_–≥—Ä—É–ø–ø—ã)

user_class = []  # –í –¥–∞–ª—å–Ω–µ–π—à–µ–º —Å—é–¥–∞ –∑–∞–ø–∏—à–µ—Ç—Å—è –∫–ª–∞—Å—Å

__connection = None


def get_connection():  # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
    global __connection
    if __connection is None:
        __connection = sqlite3.connect('quick.db')
    return __connection


def check_reg(user_id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–∞–∑–µ
    conn = get_connection()
    c = conn.cursor()
    c.execute('SELECT user_id FROM user WHERE user_id = %d' % user_id)
    result = c.fetchone()
    if result is None:
        return False
    return True


def register_new_user(user_id: int):  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    conn = get_connection()
    c = conn.cursor()
    c.execute('INSERT INTO user (user_id, class, state) VALUES (?,?,?)',
              (user_id, '', 'no_ready'))  # –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏(1) –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫—É class
    conn.commit()


def check_state(user_id):  # –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å—Å—ã–ª–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∏ False –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞
    conn = get_connection()
    c = conn.cursor()
    c.execute('SELECT state FROM user WHERE user_id = %d' % user_id)
    result = c.fetchone()
    return result[0]


def add_class(class_name, state, user_id: int):  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ class
    conn = get_connection()
    c = conn.cursor()
    c.execute('UPDATE user SET class = \'%s\', state = \'%s\' WHERE user_id = %d' % (class_name, state, user_id))
    conn.commit()


def create_keyboard(response, user_id):  # –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã || response - —Ç–µ–∫—Å—Ç, –≤–≤–æ–¥–∏–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    keyboard = VkKeyboard(one_time=False, inline=True)
    if response.lower() == '—Å—Ç–∞—Ä—Ç':
        keyboard.add_button('10-–∞', color=VkKeyboardColor.DEFAULT)
        keyboard.add_button('10-–≥', color=VkKeyboardColor.DEFAULT)
        keyboard.add_button('10-–µ', color=VkKeyboardColor.DEFAULT)
    elif response.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
        keyboard.add_button('–¢–µ–∫—Å—Ç–æ–ºüìù', color=VkKeyboardColor.POSITIVE)
        keyboard.add_line()
        keyboard.add_button('–ö–∞—Ä—Ç–∏–Ω–∫–æ–πüñº', color=VkKeyboardColor.POSITIVE)
    elif check_state(user_id) == 'ready':
        keyboard.add_button('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', color=VkKeyboardColor.PRIMARY)
    else:
        if check_state(user_id) == 'ready':
            keyboard.add_button('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', color=VkKeyboardColor.PRIMARY)
        elif check_state(user_id) == 'no_ready':
            keyboard.add_button('10-–∞', color=VkKeyboardColor.DEFAULT)
            keyboard.add_button('10-–≥', color=VkKeyboardColor.DEFAULT)
            keyboard.add_button('10-–µ', color=VkKeyboardColor.DEFAULT)
    return keyboard.get_keyboard()


def change_mode(mode, user_id):  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ mode || –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = get_connection()
    c = conn.cursor()
    c.execute('UPDATE user SET mode = %d WHERE user_id = %d' % (mode, user_id))
    conn.commit()
    time.sleep(0.2)


def tommorow_day():  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —Ü–∏—Ñ—Ä–æ–π
    if dt.today().weekday() + 1 == 7:
        return 0
    return dt.today().weekday() + 1


def get_class(user_id):  # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–æ–ª–æ–Ω–∫–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ || –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –∫–æ—Ä—Ç–µ–∂–∞–º–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    conn = get_connection()
    c = conn.cursor()
    c.execute('SELECT class FROM user WHERE user_id = %d' % user_id)
    res = c.fetchone()
    return res[0]


def lesson(user_id):  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    conn = get_connection()
    c = conn.cursor()
    c.execute('SELECT lesson_%d FROM class WHERE class_name = \'%s\'' % (tommorow_day(), get_class(user_id)))
    res = c.fetchall()
    return res[0][0]


def photos(user_id):
    a = vk.meyhod('photos.getMessagesUploadServer')
    b = requests.post(a['upload_url'], files={
        'photo': open('out/%s_class_%d.png'.format(get_class(user_id), tommorow_day()), 'rb')}).json()
    c = vk_session.method('photos.saveMessagesPhoto', {'photo': b['photo'], 'server': b['server'], 'hash': b['hash']})[
        0]
    attachment = "photo{}_{}_{}".format(c['owner_id'], c['id'], c['access_key'])
    return attachment


solid_fill = (50, 50, 50, 255)

__connection = None


def get_conection():
    global __connection
    if __connection is None:
        __connection = sqlite3.connect('quick.db')
    return __connection


def get_lesson_tomorrow(class_name):
    conn = get_conection()
    c = conn.cursor()
    c.execute('SELECT lesson_%d FROM class WHERE class_name = \'%s\'' % (tommorow_day(), class_name))
    res = c.fetchall()
    return res[0][0]


image_list = []


def crate_image(class_name):
    directory = 'images'
    list_directory = os.listdir(directory)

    for x in list_directory:
        image_list.append(x)
    image_ = Image.open('images/%s' % random.choice(image_list))
    img = ImageDraw.Draw(image_)
    w, h = image_.size

    x = round(w / 43.75)
    y = round(h / 75.13)
    font_size = round(w * 0.0513406)
    font = ImageFont.truetype('fonts/font3.otf', font_size)
    img_text = get_lesson_tomorrow(class_name) + '\n\n>–î–ª—è %s –∫–ª–∞—Å—Å–∞<' % class_name
    # 255 82 82
    weight = round(w / 2)
    height = round(h / 2)

    pixel = []
    for x_ in range(weight):
        for y_ in range(height):
            r, g, b = image_.getpixel((x_, y_))
            pixel.append([r, g, b])

    avr = [sum(x) // len(x) for x in zip(*pixel)]
    r, g, b = avr
    morning, day = t_w.weather_r()
    temp_morning = morning + ' ¬∞C'
    temp_day = day + ' ¬∞C'
    img.text((x, y), img_text, fill=(255 - r, 255 - g, 255 - b), font=font)
    x1 = round(w / 1.3)
    y1 = round(h / 75)
    pix = []
    for x_ in range(x1, w):
        for y_ in range(height):
            red, green, blue = image_.getpixel((x_, y_))
            pix.append([red, green, blue])

    avr1 = [sum(x) // len(x) for x in zip(*pix)]
    r1, g1, b1 = avr1

    x_for_line = x1
    y_for_line = round(h / 11.71875)
    img1 = ImageDraw.Draw(image_)
    shape = [(x_for_line, y_for_line), (w, y_for_line)]
    draw_line = img1.line(shape, fill=(255 - r1, 255 - g1, 255 - b1), width=round(h / 750))
    temp_font = ImageFont.truetype('fonts/17575.ttf', round(font_size * 1.5))
    img.text((round(w * 0.56), round(h / 32.6)), '–£—Ç—Ä–æ–º:', fill=(255 - r1, 255 - g1, 255 - b1), font=font)
    img.text((round(w * 0.585), round(h / 9.375)), '–î–Ω–µ–º:', fill=(255 - r1, 255 - g1, 255 - b1), font=font)
    img.text((x1, y1), temp_morning, fill=(255 - r1, 255 - g1, 255 - b1), font=temp_font)
    img.text((x1, round(h / 10.075471698)), temp_day, fill=(255 - r1, 255 - g1, 255 - b1), font=temp_font)
    image_.save('out/%s_class_%d.png' % (class_name, tommorow_day()), 'PNG')


def main():
    for event in longpool.listen():
        user_id = event.obj.from_id
        if event.type == VkBotEventType.MESSAGE_NEW:
            if not check_reg(event.obj.from_id):
                register_new_user(event.obj.from_id)
            # print('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
            # print('–î–ª—è TEST –æ—Ç: ', end='')
            # print(event.obj.from_id)
            # print('–¢–µ–∫—Å—Ç:', event.obj.text + '\n')
            # print(event.obj)
            response = str(event.obj.text)
            if response.lower() == '–Ω–∞—á–∞—Ç—å' or response.lower() == '—Å—Ç–∞—Ä—Ç':
                vk.messages.send(
                    user_id=user_id,
                    message='–ü—Ä–∏–≤–µ—Ç.\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å',
                    keyboard=create_keyboard(response, user_id),
                    random_id=get_random_id()
                )

            elif response == '10-–∞' or response == '10-–≥' or response == '10-–µ':
                # print(response)
                user_class = response
                add_class(user_class, 'ready', user_id)
                vk.messages.send(
                    user_id=user_id,
                    message='–ê —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—åüéà',
                    keyboard=create_keyboard(response, user_id),
                    random_id=get_random_id()
                )
            elif response.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
                vk.messages.send(
                    user_id=user_id,
                    message='–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Ç–µ–±—è –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n*–î–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è',
                    keyboard=create_keyboard(response, user_id),
                    random_id=get_random_id()
                )
            elif response.lower() == '–∫–∞—Ä—Ç–∏–Ω–∫–æ–πüñº':

                vk.messages.send(
                    user_id=user_id,
                    message='–°–µ–∫—É–Ω–¥–æ—á–∫—É)',
                    # keyboard=create_keyboard(response, user_id),
                    random_id=get_random_id()
                )
                t2 = threading.Thread(target=crate_image, args=(get_class(user_id)))
                
                a = vk_session.method('photos.getMessagesUploadServer')
                b = requests.post(a['upload_url'], files={
                    'photo': open('out/{}_class_{}.png'.format(get_class(user_id), tommorow_day()), 'rb')}).json()
                c = vk_session.method('photos.saveMessagesPhoto',
                                      {'photo': b['photo'], 'server': b['server'], 'hash': b['hash']})[0]
                # print(c)
                attachment = "photo{}_{}_{}".format(c['owner_id'], c['id'], c['access_key'])
                # print(attachment)
                vk.messages.send(
                    user_id=user_id,
                    message='–î–µ—Ä–∂–∏:',
                    attachment=attachment,
                    keyboard=create_keyboard(response, user_id),
                    random_id=get_random_id()
                )
            elif response.lower() == '—Ç–µ–∫—Å—Ç–æ–ºüìù':
                morning, day = t_w.weather_r()
                vk.messages.send(
                    user_id=user_id,
                    message='–î–µ—Ä–∂–∏:\n' + lesson(user_id) + '\n\n–ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n  –£—Ç—Ä–æ–º: ' + str(
                        morning) + '¬∞C\n  –î–Ω–µ–º: ' + str(day) + '¬∞C',
                    keyboard=create_keyboard(response, user_id),
                    random_id=get_random_id()
                )
            else:
                if check_state(user_id) == 'ready':
                    vk.messages.send(
                        user_id=user_id,
                        message='‚ùå–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ.‚ùå',
                        keyboard=create_keyboard(response, user_id),
                        random_id=get_random_id()
                    )
                elif check_state(user_id) == 'no_ready':
                    vk.messages.send(
                        user_id=user_id,
                        message='–Ø –µ—â–µ –Ω–µ –∑–Ω–∞—é –≤ –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ.\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å:',
                        keyboard=create_keyboard(response, user_id),
                        random_id=get_random_id()
                    )

t1 = threading.Thread(target=main)
t2 = threading.Thread(target=crate_image())

